#!/usr/bin/env python
# -*- use system default  python -*-
from __future__ import print_function
from fnmatch    import fnmatch
from Version    import Version
from util       import capture
import os, sys, re
import getopt



#get files in the target parth
def files_in_tree(path,pattern):
  fileA = []
  wd = os.getcwd()
  if (not os.path.isdir(path)):
    return fileA

  os.chdir(path)
  path = os.getcwd()
  os.chdir(wd)

  for root, dirs, files in os.walk(path):
    for name in files:
      fn = os.path.join(root, name)
      if (fnmatch(fn,pattern)):
        fileA.append(fn)
  return fileA  



def import_class(cl):
  (module, classname) = cl.rsplit(".")
  m = __import__(module, globals(), locals(), [classname])
  return getattr(m, classname)

testNamePat = re.compile(r'(\d+)_([^.]*)')



#main function
def main():

########################################################################
#  Generate Name and Version.
########################################################################

  vstr = Version().name()
  replace_str = ''
#  my_version=vstr
  pkg_dir, exec_name = os.path.split(os.path.abspath(sys.argv[0]))
  if (os.path.isdir(os.path.join(pkg_dir,".git"))):
    describe = capture ("git describe").replace('\n','')
    if (describe.find("command not found") == -1):
      replace_str = '(' + describe + ')'
  vstr = vstr.replace("@git@",replace_str)

#Please remember to update the version
  vstr="1.1"
  my_version=vstr

########################################################################
# Parse command line arguments
########################################################################
  help_message="Sanitytool by TACC HPC\n\
  [-h,--help] 			Help information\n\
  [-s,--silent]	                Silent mode.\n\
  [-v,--verbose]                Verbose mode (default)."

# print(Help_message)  
  try:
    opts, args = getopt.getopt(sys.argv[1:], "hsv", ["help", "silent","verbose"])
  except getopt.GetoptError:
    print("Invalid option.\nTry 'sanitycheck --help' for more information.")
    sys.exit()
  
# No extra output if silend mode is on
  silent_flag=False
  for o, a in opts:
    if o in ("-h", "--help"):
        print("Sanitytool Version: ",vstr)
	print(help_message)
        sys.exit()
    if o in ("-v", "--verbose"):
	silent_flag=False
    if o in ("-s", "--silent"):
        silent_flag=True
    
   
########################################################################
#  Find the tests in the test directory:
########################################################################

  # (1) Find test directory base on location of this file:
  pkg_dir, exec_name = os.path.split(os.path.abspath(sys.argv[0]))
  test_dir           = os.path.join(pkg_dir, "tests")

  # (2) Find all *.py file in test directory
  testFnA = files_in_tree(test_dir, "*.py")
  testFnA.sort()

  # (3) Build all test and place in "testA"
  dirT  = {}
  testA = []
  for fn in testFnA:
    dir_name, bareFn = os.path.split(fn)
    
    # Make sure that all tests directory are in appended to python internal
    # path
    if ( not (dir_name in dirT)):
      dirT[dir_name] = True
      sys.path.append(dir_name)
    
    # Use the name of the file to build the test:
    # All tests are named XYZ_ClassName.py
    # For example: 001_SSH_Perm.py.  The seq number is 001 and the
    # class name in the file is named "SSH_Perm".  It is important that
    # Test programs follow this naming scheme.

    m = testNamePat.search(bareFn)
    if (m): 
      seq         = m.group(1)
      num         = int(seq)
      class_name  = m.group(2)
      s           = m.group(0) + "." + class_name
      my_class    = import_class(s)
      
      testA.append({'num'        : num,
                    'fn'         : bareFn,
                    'class_name' : class_name,
                    'test'       : my_class(),
                    }
                  )
  if not silent_flag:
    print("Sanitytool Version: ",my_version)
    print("")

#########################################################################
#  Run Tests
#########################################################################

  errorCount = 0
  numTests   = len(testA)
  for entry in testA:
    
    if silent_flag:
	pass
    else:
	print("%3d: %s" %(entry['num'], entry['test'].description()))
	
    result = entry['test'].execute()

    if (not result):
        print("\tFailed")
        errorCount += 1
        entry['test'].error()
        entry['test'].help()
    else:
	if silent_flag:
		pass
	else:
          print("\tPassed\n")
  
#########################################################################
#  Summarize Results
#########################################################################
  if not silent_flag:
    if (errorCount > 0):
      print ( "-------------------------------\n",
            "     %d/%d tests failed "     % (errorCount, numTests),
            "\n-------------------------------\n" )
    else:
      print ( "----------------------------\n",
            "     All tests passed"
            "\n----------------------------\n")
  
if ( __name__ == '__main__'): main()
